// AuthContext.js
import { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'react-toastify';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(() => {
    return localStorage.getItem('isAuthenticated') === 'true';
  });
  const [username, setUsername] = useState(localStorage.getItem('username') || '');

  const login = async (username, password) => {
    try {
      const response = await axios.get(
        `http://localhost:3000/users?username=${username}&password=${password}`
      );
      
      if (response.data.length > 0) {
        localStorage.setItem('isAuthenticated', 'true');
        localStorage.setItem('username', username);
        setIsAuthenticated(true);
        setUsername(username);
        toast.success('You are authorized');
        return true;
      } else {
        toast.error('Invalid username or password');
        return false;
      }
    } catch (err) {
      console.error('Error logging in:', err);
      toast.error('Server error. Please try again later.');
      return false;
    }
  };

  const logout = () => {
    localStorage.removeItem('isAuthenticated');
    localStorage.removeItem('username');
    setIsAuthenticated(false);
    setUsername('');
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, username, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// ProtectedRoute.js
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './AuthContext';

export const ProtectedRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();
  const location = useLocation();

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
};

// Login.js (Updated)
import { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from './AuthContext';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();
  const location = useLocation();
  const { login } = useAuth();

  const from = location.state?.from?.pathname || '/employees';

  const handleSubmit = async (e) => {
    e.preventDefault();
    const success = await login(username, password);
    if (success) {
      navigate(from, { replace: true });
    }
  };

  return (
    <div className="row">
      <div className="offset-lg-3 col-lg-6" style={{ marginTop: '100px' }}>
        <form onSubmit={handleSubmit} className="container">
          <div className="card">
            <div className="card-header">
              <h2>User Login</h2>
            </div>
            <div className="card-body">
              <div className="form-group">
                <label>User Name <span className="errmsg">*</span></label>
                <input 
                  value={username} 
                  onChange={e => setUsername(e.target.value)} 
                  className="form-control" 
                  required 
                />
              </div>
              <div className="form-group">
                <label>Password <span className="errmsg">*</span></label>
                <input 
                  type="password" 
                  value={password} 
                  onChange={e => setPassword(e.target.value)} 
                  className="form-control" 
                  required 
                />
              </div>
            </div>
            <div className="card-footer">
              <button type="submit" className="btn btn-primary">Login</button> |
              <Link className="btn btn-success" to={'/register'}>New User</Link>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

// HeaderComponent.js (Updated)
import { useAuth } from './AuthContext';
import { useNavigate } from 'react-router-dom';

const HeaderComponent = () => {
  const { isAuthenticated, username, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  return (
    <div>
      <header>
        <nav className="navbar navbar-dark bg-dark">
          <a className="navbar-brand" href="#">Employee List</a>
          {isAuthenticated && (
            <div className="d-flex align-items-center">
              <span className="text-white me-3">Welcome, {username}</span>
              <button 
                className="btn btn-outline-light"
                onClick={handleLogout}
              >
                Logout
              </button>
            </div>
          )}
        </nav>
      </header>
    </div>
  );
};

// App.js (Updated)
import { AuthProvider } from './AuthContext';
import { ProtectedRoute } from './ProtectedRoute';

function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <ToastContainer />
        <HeaderComponent />
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/" element={<Navigate to="/login" replace />} />
          <Route path="/register" element={<RegisterForm />} />
          <Route 
            path="/employees" 
            element={
              <ProtectedRoute>
                <ListEmployeeComponent />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/add-employee" 
            element={
              <ProtectedRoute>
                <EmployeeComponent />
              </ProtectedRoute>
            }
          />
          <Route 
            path="/edit-employee/:id" 
            element={
              <ProtectedRoute>
                <EmployeeComponent />
              </ProtectedRoute>
            }
          />
        </Routes>
        <FooterComponent />
      </BrowserRouter>
    </AuthProvider>
  );
}
